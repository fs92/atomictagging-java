/**
 * This file is part of Atomic Tagging.
 * 
 * Atomic Tagging is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * Atomic Tagging is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with Atomic Tagging. If not, see
 * <http://www.gnu.org/licenses/>.
 */
package org.atomictagging.core.accessors;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.atomictagging.core.types.IAtom;
import org.atomictagging.core.types.IMolecule;

/**
 * API class to write molecules to the DB.
 * 
 * @author Stephan Mann
 */
public class DbWriter {

	/**
	 * Writes a molecule with all its atoms, tags, and the atoms tags to the database.
	 * 
	 * @param molecule
	 * @return The ID of the molecule as generated by the DB
	 */
	public static long write( IMolecule molecule ) {
		long moleculeId = 0;

		try {
			DB.CONN.setAutoCommit( false );

			// Write atoms
			List<Long> atomIds = writeList( molecule.getAtoms() );

			// Write molecule
			PreparedStatement insertMolecule = DB.CONN.prepareStatement( "INSERT INTO molecules VALUES ()",
					Statement.RETURN_GENERATED_KEYS );
			insertMolecule.execute();
			moleculeId = getAutoIncrementId( insertMolecule );

			// Write molecule tags
			PreparedStatement insertTags = DB.CONN
					.prepareStatement( "INSERT INTO molecule_has_tags (molecules_moleculeid, tags_tagid) VALUES (?, ?)" );
			insertTags.setLong( 1, moleculeId );

			for ( String tag : molecule.getTags() ) {
				long tagId = writeTag( tag );
				insertTags.setLong( 2, tagId );
				insertTags.execute();
			}

			// Write links between atoms and molecules
			PreparedStatement insertLinks = DB.CONN
					.prepareStatement( "INSERT INTO molecule_has_atoms (molecules_moleculeid, atoms_atomid) VALUES (?, ?)" );
			insertLinks.setLong( 1, moleculeId );

			for ( long atomId : atomIds ) {
				insertLinks.setLong( 2, atomId );
				insertLinks.execute();
			}

			DB.CONN.commit();
			DB.CONN.setAutoCommit( true );
		} catch ( SQLException e ) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return moleculeId;
	}


	private static long getAutoIncrementId( PreparedStatement statement ) throws SQLException {
		ResultSet resultSet = statement.getGeneratedKeys();

		if ( resultSet.next() ) {
			return resultSet.getLong( "GENERATED_KEY" );
		}

		return -1;
	}


	private static long getIdOfExistingEntity( PreparedStatement statement, String column ) throws SQLException {
		ResultSet possiblyExisting = statement.getResultSet();

		if ( possiblyExisting.next() ) {
			return possiblyExisting.getLong( column );
		}

		return -1;
	}

	private static PreparedStatement	checkAtom;
	private static PreparedStatement	insertAtom;
	private static PreparedStatement	checkAtomTags;
	/**
	 * FIXME That needs to me moved somewhere else.
	 */
	public static PreparedStatement		insertAtomTags;
	private static PreparedStatement	checkTag;
	private static PreparedStatement	insertTag;

	static {
		try {
			checkAtom = DB.CONN.prepareStatement( "SELECT atomid FROM atoms WHERE data = ?" );
			insertAtom = DB.CONN.prepareStatement( "INSERT INTO atoms (data) VALUES (?)",
					Statement.RETURN_GENERATED_KEYS );
			checkAtomTags = DB.CONN
					.prepareStatement( "SELECT atoms_atomid FROM atom_has_tags WHERE atoms_atomid = ? AND tags_tagid = ?" );
			insertAtomTags = DB.CONN
					.prepareStatement( "INSERT INTO atom_has_tags (atoms_atomid, tags_tagid) VALUES (?, ?)" );
			checkTag = DB.CONN.prepareStatement( "SELECT tagid FROM tags WHERE tag = ?" );
			insertTag = DB.CONN.prepareStatement( "INSERT INTO tags (tag) VALUES (?)", Statement.RETURN_GENERATED_KEYS );
		} catch ( SQLException e ) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	/**
	 * Writes a list of atoms to the database.
	 * 
	 * Note: Neither exceptions nor commit are handled.
	 * 
	 * @param atoms
	 * @return List of atom IDs
	 * @throws SQLException
	 */
	private static List<Long> writeList( List<IAtom> atoms ) throws SQLException {
		List<Long> atomIds = new ArrayList<Long>();

		for ( IAtom atom : atoms ) {
			checkAtom.setString( 1, atom.getData() );
			checkAtom.execute();
			long atomId = getIdOfExistingEntity( checkAtom, "atomid" );

			if ( atomId == -1 ) {
				insertAtom.setString( 1, atom.getData() );
				insertAtom.execute();
				atomId = getAutoIncrementId( insertAtom );
			}

			for ( String tag : atom.getTags() ) {
				long tagId = writeTag( tag );

				checkAtomTags.setLong( 1, atomId );
				checkAtomTags.setLong( 2, tagId );
				checkAtomTags.execute();
				long tagCheck = getIdOfExistingEntity( checkAtomTags, "atoms_atomid" );

				if ( tagCheck == -1 ) {
					insertAtomTags.setLong( 1, atomId );
					insertAtomTags.setLong( 2, tagId );
					insertAtomTags.execute();
				}
			}

			atomIds.add( atomId );
		}

		return atomIds;
	}


	/**
	 * FIXME That needs to be moved somewhere else.
	 * 
	 * @param tag
	 * @return The tag ID
	 * @throws SQLException
	 */
	public static long writeTag( String tag ) throws SQLException {
		assert tag != null && !tag.isEmpty();

		checkTag.setString( 1, tag );
		checkTag.execute();
		long tagId = getIdOfExistingEntity( checkTag, "tagid" );

		if ( tagId == -1 ) {
			insertTag.setString( 1, tag );
			insertTag.execute();
			tagId = getAutoIncrementId( insertTag );
		}

		return tagId;
	}

}